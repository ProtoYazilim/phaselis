import * as fs from "fs";
import * as path from "path";

// Adjust the path to your theme file
const themeFilePath = path.join(__dirname, "../theme/lightTheme.tsx");
const outputFilePath = path.join(__dirname, "../global.d.ts");

// Function to generate content for the TypeScript file
const generateInterfacesContent = (components: { [key: string]: any }) => {
  let content = "";

  content += `// This file is generated by a script. Do not modify this file manually.\n\n`;
  content += `/* eslint-disable prettier/prettier */\n\n`;

  Object.keys(components).forEach((componentName) => {
    const interfaceName = `${componentName.charAt(0).toUpperCase() + componentName.slice(1)}ExtraProps`;
    const component = components[componentName];

    // Aggregate variants for each section
    const aggregatedVariants: { [key: string]: Set<string> } = {};

    // Initialize the aggregated variants object
    Object.keys(component).forEach((sectionName) => {
      const section = component[sectionName];

      if (section.variants) {
        Object.keys(section.variants).forEach((variantKey) => {
          const variant = section.variants[variantKey];

          if (!aggregatedVariants[variantKey]) {
            aggregatedVariants[variantKey] = new Set();
          }

          if (variant.hasOwnProperty("true")) {
            aggregatedVariants[variantKey].add("boolean");
          } else if (typeof variant === "object") {
            Object.keys(variant).forEach((key) => {
              aggregatedVariants[variantKey].add(`"${key}"`);
            });
          }
        });
      }
    });

    // Generate interface content
    content += `interface ${interfaceName} {\n`;

    Object.keys(aggregatedVariants).forEach((variantKey) => {
      const types = Array.from(aggregatedVariants[variantKey]).join(" | ");
      content += `  ${variantKey}?: ${types};\n`;
    });

    content += `}\n\n`;
  });

  return content;
};

async function generateInterfaceFile() {
  try {
    // Dynamically import the theme file
    // @ts-ignore
    const themeModule = await import(themeFilePath);
    const lightTheme = themeModule.lightTheme;

    if (!lightTheme) {
      throw new Error("lightTheme is not exported from the theme file.");
    }

    // Get all top-level keys (component names), excluding 'root'
    const componentNames = Object.keys(lightTheme).filter(
      (key) => key !== "root",
    );

    // todo : layerd componentler icin reduce u duzenle
    const components = componentNames.reduce(
      (acc, name) => {
        acc[name] = lightTheme[name];
        return acc;
      },
      {} as { [key: string]: any },
    );

    // Generate content for the TypeScript file
    const content = generateInterfacesContent(components);

    // Write the content to a single TypeScript file
    fs.writeFileSync(outputFilePath, content, { encoding: "utf8" });
    console.log(`Created ${outputFilePath}`);
  } catch (error) {
    console.error("Error reading theme file:", error);
  }
}

generateInterfaceFile();
